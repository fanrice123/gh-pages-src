{"version":3,"sources":["components/pages/Main.tsx","components/pages/Test.tsx","components/menubar/Menubar.tsx","components/menubar/MenuChoice.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyle","makeStyles","theme","createStyles","centered","textAlign","margin","Main","classes","react_default","a","createElement","className","useStyles","appBar","zIndex","modal","title","flexGrow","MenuBar","_ref","children","selected","AppBar","position","Toolbar","MenuChoice","to","label","id","Button","component","RouterLink","root","backgroundColor","palette","background","paper","menuButton","marginRight","spacing","App","_useState","useState","_useState2","Object","slicedToArray","selectedTab","pageTitle","Typography","variant","Fragment","CssBaseline","Helmet","name","content","Menubar","menubar_MenuChoice","react_router","exact","path","Test","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAWMA,EAAWC,YAAW,SAACC,GAAD,OAAkBC,YAAa,CACzDC,SAAU,CACRC,UAAW,SACXC,OAAQ,aA6BGC,EAzBQ,WACrB,IAAMC,EAAUR,IAChB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQJ,UACtBK,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,+BCXHX,EAAWC,YAAW,SAACC,GAAD,OAAkBC,YAAa,CACzDC,SAAU,CACRC,UAAW,cA6BAE,EAzBQ,WACrB,IAAMC,EAAUR,IAChB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQJ,UACtBK,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,+CCdHE,EAAYZ,YAAW,SAACC,GAAD,OAAkBC,YAAa,CAC1DW,OAAQ,CACNC,OAAQb,EAAMa,OAAOC,MAAQ,GAI/BC,MAAO,CACLC,SAAU,OAsBCC,EAZyB,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,SACnCb,GADmEY,EAAtBE,SAAsBF,EAAZH,MAC7CJ,KAEhB,OACEJ,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQC,SAAS,QAAQZ,UAAWJ,EAAQM,QAC1CL,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACGJ,qBCXMK,EARmB,SAAAN,GAAkC,IAA/BO,EAA+BP,EAA/BO,GAAIC,EAA2BR,EAA3BQ,MAAOC,EAAoBT,EAApBS,GAAIjB,EAAgBQ,EAAhBR,UAClD,OACEH,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,UAAWC,IAAYL,GAAIA,EAAIE,GAAIA,EAAIjB,UAAWA,GACvDgB,oBCDDf,EAAYZ,YAAW,SAACC,GAAD,OAAkBC,YAAa,CAC1D8B,KAAM,CACJf,SAAU,EACVgB,gBAAiBhC,EAAMiC,QAAQC,WAAWC,OAE5CC,WAAY,CACVC,YAAarC,EAAMsC,QAAQ,IAE7BvB,MAAO,CACLC,SAAU,OA0CCuB,EArCO,WACpB,IAAMjC,EAAUK,IADU6B,EAGYC,mBAAS,GAHrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGnBK,EAHmBH,EAAA,GASpBI,GAToBJ,EAAA,GAUxBnC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAYC,QAAQ,KAAKtC,UAAWJ,EAAQS,OA1BzB,cA8BrB,OACER,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACE1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAA,OAAD,KACE5C,EAAAC,EAAAC,cAAA,aAlCe,aAmCfF,EAAAC,EAAAC,cAAA,QAAM2C,KAAK,WAAWC,QAAQ,4EAEhC9C,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAQyB,MACtBxB,EAAAC,EAAAC,cAAC6C,EAAD,CAASlC,SAAUyB,EAAa9B,MAtCjB,aAuCbR,EAAAC,EAAAC,cAAC8C,EAAD,CAAY9B,GAAG,IAAIC,MAAOoB,EAAWnB,GAAG,eAAejB,UAAWJ,EAAQS,QAC1ER,EAAAC,EAAAC,cAAC8C,EAAD,CAAY9B,GAAG,QAAQC,MAAM,OAAOC,GAAG,aAAajB,UAAWJ,EAAQ8B,aACvE7B,EAAAC,EAAAC,cAAC8C,EAAD,CAAY9B,GAAG,QAAQC,MAAM,OAAOC,GAAG,gBAEzCpB,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAI7B,UAAWxB,IACjCE,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQ7B,UAAW8B,cC5C3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACI5D,EAAAC,EAAAC,cAAC2D,EAAD,OAEJC,SAASC,eAAe,SD8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.507013fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n  centered: {\n    textAlign: 'center',\n    margin: '200px'\n  }\n}));\n\nconst Main: React.FC = () => {\n  const classes = useStyle();\n  return (\n    <div className={classes.centered} >\n      <p><span>Hello World!</span></p>\n    </div >\n  );\n  // return (\n  //   <div className={classes.root}>\n  //     <AppBar position=\"fixed\" className={classes.appBar}>\n  //       <Toolbar>\n  //         <IconButton edge=\"start\" className={classes.menuButton} onClick={(e) => setSideBarOpen(!sideBarOpen)}>\n  //           <MenuIcon />\n  //         </IconButton>\n  //         <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n  //           Test\n  //         </Typography>\n  //         <Button color=\"inherit\">Login</Button>\n  //       </Toolbar>\n  //     </AppBar>\n  //     <Sidebar open={sideBarOpen} changeState={setSideBarOpen}></Sidebar>\n  //   </div>\n  // );\n};\n\nexport default Main;","import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyle = makeStyles((theme: Theme) => createStyles({\n  centered: {\n    textAlign: 'center'\n  }\n}));\n\nconst Main: React.FC = () => {\n  const classes = useStyle();\n  return (\n    <div className={classes.centered} >\n      <p><span>Hello World!</span></p>\n    </div >\n  );\n  // return (\n  //   <div className={classes.root}>\n  //     <AppBar position=\"fixed\" className={classes.appBar}>\n  //       <Toolbar>\n  //         <IconButton edge=\"start\" className={classes.menuButton} onClick={(e) => setSideBarOpen(!sideBarOpen)}>\n  //           <MenuIcon />\n  //         </IconButton>\n  //         <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n  //           Test\n  //         </Typography>\n  //         <Button color=\"inherit\">Login</Button>\n  //       </Toolbar>\n  //     </AppBar>\n  //     <Sidebar open={sideBarOpen} changeState={setSideBarOpen}></Sidebar>\n  //   </div>\n  // );\n};\n\nexport default Main;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tabs from '@material-ui/core/Tabs';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  appBar: {\n    zIndex: theme.zIndex.modal + 1,\n    //background: 'transparent',\n    //boxShadow: 'none'\n  },\n  title: {\n    flexGrow: 1,\n  }\n}));\n\ntype MenuBarProps = {\n  selected: number,\n  title: string,\n  //onChange: (e: React.ChangeEvent<{}>, tabIdx: number) => void\n}\n\nconst MenuBar: React.FC<MenuBarProps> = ({ children, selected, title }) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n        {children}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default MenuBar;","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\ntype MenuChoiceProps = {\n  to: string,\n  label: string,\n  id?: string,\n  className?: string\n};\n\nconst MenuChoice: React.FC<any> = ({ to, label, id, className }) => {\n  return (\n    <Button component={RouterLink} to={to} id={id} className={className}>\n      {label}\n    </Button>\n  );\n}\n\nexport default MenuChoice;","import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Main from './components/pages/Main';\nimport Test from './components/pages/Test';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport MenuBar from './components/menubar/Menubar';\nimport MenuChoice from './components/menubar/MenuChoice';\nimport { Route, Switch } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\n\nconst WEB_PAGE_TITLE = 'Royce Fan';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  //const [sideBarOpen, setSideBarOpen] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const changeTab = (e: React.ChangeEvent<{}>, newTabIdx: number) => {\n    setSelectedTab(newTabIdx)\n  };\n\n  const pageTitle = (\n    <Typography variant=\"h6\" className={classes.title}>\n      {WEB_PAGE_TITLE}\n    </Typography>\n  );\n  return (\n    <>\n      <CssBaseline />\n      <Helmet>\n        <title>{WEB_PAGE_TITLE}</title>\n        <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\" />\n      </Helmet>\n      <div className={classes.root}>\n        <MenuBar selected={selectedTab} title={WEB_PAGE_TITLE}>\n          <MenuChoice to=\"/\" label={pageTitle} id=\"menu-landing\" className={classes.title} />\n          <MenuChoice to=\"/home\" label=\"Home\" id=\"menu-tab-0\" className={classes.menuButton} />\n          <MenuChoice to=\"/test\" label=\"Test\" id=\"menu-tab-1\" />\n        </MenuBar>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/test\" component={Test} />\n\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}